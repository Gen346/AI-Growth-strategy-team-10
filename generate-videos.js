import 'dotenv/config';
import { GoogleGenAI, PersonGeneration } from '@google/genai';
import { writeFile } from 'fs/promises';
import fetch from 'node-fetch';
import readline from 'readline';
import * as fs from 'fs';
import * as readline from 'node:readline/promises';

const apiKey = process.env.GEMINI_API_KEY;
if (!apiKey) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ GEMINI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
    console.error("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.");
    process.exit(1);
}

const ai = new GoogleGenAI({ apiKey });

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

async function generateVideo(prompt, durationSeconds = 8, aspectRatio = '16:9') {
    console.log(`üé¨ –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–µ–æ –∑ –∑–∞–ø–∏—Ç–æ–º: "${prompt}"`);
    console.log(`‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${durationSeconds} —Å–µ–∫—É–Ω–¥`);
    console.log(`üìê –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω: ${aspectRatio}`);
    
    try {
        if (!fs.existsSync('videos')) {
            fs.mkdirSync('videos');
        }

        console.log("üöÄ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–ø–∏—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –≤—ñ–¥–µ–æ...");
        
        let operation = await ai.models.generateVideos({
            model: 'veo-2.0-generate-001',
            prompt: prompt,
            config: {
                numberOfVideos: 1,
                aspectRatio: aspectRatio,
                durationSeconds: durationSeconds,
                personGeneration: PersonGeneration.ALLOW_ALL,
            },
        });

        console.log("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–µ–æ —Ä–æ–∑–ø–æ—á–∞—Ç–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...");
        console.log("üí° –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω...");

        let attempts = 0;
        const maxAttempts = 60;
        
        while (!operation.done && attempts < maxAttempts) {
            attempts++;
            console.log(`‚è≥ –°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–æ–±—Ü—ñ... (—Å–ø—Ä–æ–±–∞ ${attempts}/${maxAttempts})`);
            console.log("‚è∞ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 10 —Å–µ–∫—É–Ω–¥...");
            
            await new Promise((resolve) => setTimeout(resolve, 10000));
            
            try {
                operation = await ai.operations.getVideosOperation({
                    operation: operation,
                });
            } catch (statusError) {
                console.log("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞—Ç—É—Å—É, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è...");
            }
        }

        if (attempts >= maxAttempts) {
            console.error("‚ùå –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
            return;
        }

        console.log("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        console.log(`üéâ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ ${operation.response?.generatedVideos?.length ?? 0} –≤—ñ–¥–µ–æ(–∞).`);

        if (operation.response?.generatedVideos) {
            for (let i = 0; i < operation.response.generatedVideos.length; i++) {
                const generatedVideo = operation.response.generatedVideos[i];
                
                if (generatedVideo?.video?.uri) {
                    console.log(`üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –≤—ñ–¥–µ–æ ${i + 1}: ${generatedVideo.video.uri}`);
                    
                    try {
                        const response = await fetch(`${generatedVideo.video.uri}&key=${apiKey}`);
                        
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        
                        const buffer = await response.arrayBuffer();
                        
                        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                        const safePrompt = prompt.replace(/[^a-zA-Z0-9]/g, '_').substring(0, 30);
                        const filename = `videos/veo2-video-${timestamp}-${safePrompt}-${i}.mp4`;
                        
                        await writeFile(filename, Buffer.from(buffer));
                        
                        const stats = fs.statSync(filename);
                        const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
                        
                        console.log(`üéâ –í—ñ–¥–µ–æ ${i + 1} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫: ${filename}`);
                        console.log(`üìä –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: ${fileSizeInMB} MB`);
                        
                    } catch (downloadError) {
                        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ ${i + 1}:`, downloadError.message);
                    }
                } else {
                    console.log(`‚ö†Ô∏è –í—ñ–¥–µ–æ ${i + 1} –Ω–µ –º—ñ—Å—Ç–∏—Ç—å URI –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è`);
                }
            }
        } else {
            console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –≤—ñ–¥–µ–æ.");
        }

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ:", error.message);
        
        if (error.message.includes("quota") || error.message.includes("429")) {
            console.log("üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –í–∏—á–µ—Ä–ø–∞–Ω–∞ –∫–≤–æ—Ç–∞. –ó–∞—á–µ–∫–∞–π—Ç–µ 24 –≥–æ–¥–∏–Ω–∏ –∞–±–æ –æ–Ω–æ–≤—ñ—Ç—å –ø–ª–∞–Ω.");
        } else if (error.message.includes("model") || error.message.includes("not found")) {
            console.log("üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –ú–æ–¥–µ–ª—å veo-2.0-generate-001 –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ.");
        } else if (error.message.includes("No instances") || error.message.includes("INVALID_ARGUMENT")) {
            console.log("üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–º –∑–∞–ø–∏—Ç—É –∞–±–æ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
        }
        
        await createFallbackDescription(prompt, durationSeconds);
    }
}

async function createFallbackDescription(prompt, durationSeconds) {
    try {
        console.log("\nüîÑ –°—Ç–≤–æ—Ä—é—é –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –≤—ñ–¥–µ–æ (–∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)...");
        
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: [{
                text: `–°—Ç–≤–æ—Ä–∏ –¥—É–∂–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –≤—ñ–¥–µ–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é ${durationSeconds} —Å–µ–∫—É–Ω–¥: "${prompt}".

–û–ø–∏—à–∏:
- –°—Ü–µ–Ω–∏ —Ç–∞ –∫–∞–¥—Ä–∏ (–ø–æ —Å–µ–∫—É–Ω–¥–∞—Ö)
- –†—É—Ö–∏ —Ç–∞ –¥—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤
- –ö–æ–ª—å–æ—Ä–∏ —Ç–∞ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
- –ê—Ç–º–æ—Å—Ñ–µ—Ä—É —Ç–∞ –Ω–∞—Å—Ç—Ä–æ—ó
- –ü–µ—Ä–µ—Ö–æ–¥–∏ –º—ñ–∂ —Å—Ü–µ–Ω–∞–º–∏
- –ó–≤—É–∫–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
- –°—Ç–∏–ª—å —Ç–∞ –≤—ñ–∑—É–∞–ª—å–Ω—ñ –µ—Ñ–µ–∫—Ç–∏

–¶–µ –º–∞—î –±—É—Ç–∏ –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å, —â–æ–± —Ä–µ–∂–∏—Å–µ—Ä –º—ñ–≥ –∑–Ω—è—Ç–∏ —Ü–µ –≤—ñ–¥–µ–æ —Ç–æ—á–Ω–æ –∑–∞ —Ç–≤–æ—ó–º –æ–ø–∏—Å–æ–º.`
            }]
        });
        
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `videos/video-description-${timestamp}.txt`;
        
        const content = `–ó–ê–ü–ò–¢: ${prompt}
–¢–†–ò–í–ê–õ–Ü–°–¢–¨: ${durationSeconds} —Å–µ–∫—É–Ω–¥
–°–¢–í–û–†–ï–ù–û: ${new Date().toLocaleString()}

–î–ï–¢–ê–õ–¨–ù–ò–ô –û–ü–ò–° –í–Ü–î–ï–û:
${response.text}`;
        
        fs.writeFileSync(filename, content);
        console.log(`üìù –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –≤—ñ–¥–µ–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫: ${filename}`);
        console.log("üìñ –û–ø–∏—Å (—Ñ—Ä–∞–≥–º–µ–Ω—Ç):", response.text.substring(0, 300) + "...");
        
    } catch (descError) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–ø–∏—Å—É:", descError.message);
    }
}

async function selectDuration() {
    return new Promise((resolve) => {
        console.log("\n‚è±Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ (Veo 2.0 –ø—ñ–¥—Ç—Ä–∏–º—É—î 4, 6, 8 —Å–µ–∫):");
        console.log("1. 4 —Å–µ–∫—É–Ω–¥–∏");
        console.log("2. 6 —Å–µ–∫—É–Ω–¥");
        console.log("3. 8 —Å–µ–∫—É–Ω–¥ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)");
        
        rl.question("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä (1-3) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è 8 —Å–µ–∫—É–Ω–¥: ", (input) => {
            const choice = input.trim();
            let duration = 8;
            
            switch (choice) {
                case '1':
                    duration = 4;
                    console.log("‚úÖ –û–±—Ä–∞–Ω–æ: 4 —Å–µ–∫—É–Ω–¥–∏");
                    break;
                case '2':
                    duration = 6;
                    console.log("‚úÖ –û–±—Ä–∞–Ω–æ: 6 —Å–µ–∫—É–Ω–¥");
                    break;
                case '3':
                case '':
                    duration = 8;
                    if (choice === '') {
                        console.log("‚úÖ –û–±—Ä–∞–Ω–æ: 8 —Å–µ–∫—É–Ω–¥ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)");
                    } else {
                        console.log("‚úÖ –û–±—Ä–∞–Ω–æ: 8 —Å–µ–∫—É–Ω–¥");
                    }
                    break;
                default:
                    console.log(`‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä '${choice}'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é 8 —Å–µ–∫—É–Ω–¥ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º).`);
                    duration = 8;
            }
            
            resolve(duration);
        });
    });
}

async function selectAspectRatio() {
    return new Promise((resolve) => {
        console.log("\nüìê –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω:");
        console.log("1. 16:9 (—à–∏—Ä–æ–∫–æ–µ–∫—Ä–∞–Ω–Ω–∏–π)");
        console.log("2. 9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π)");
        console.log("3. 1:1 (–∫–≤–∞–¥—Ä–∞—Ç–Ω–∏–π)");
        
        rl.question("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä (1-3) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è 16:9: ", (input) => {
            const choice = input.trim();
            let aspectRatio = '16:9';
            
            switch (choice) {
                case '1':
                case '':
                    aspectRatio = '16:9';
                    console.log("‚úÖ –û–±—Ä–∞–Ω–æ: 16:9 (—à–∏—Ä–æ–∫–æ–µ–∫—Ä–∞–Ω–Ω–∏–π)");
                    break;
                case '2':
                    aspectRatio = '9:16';
                    console.log("‚úÖ –û–±—Ä–∞–Ω–æ: 9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π)");
                    break;
                case '3':
                    aspectRatio = '1:1';
                    console.log("‚úÖ –û–±—Ä–∞–Ω–æ: 1:1 (–∫–≤–∞–¥—Ä–∞—Ç–Ω–∏–π)");
                    break;
                default:
                    console.log(`‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä '${choice}'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é 16:9 (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º).`);
                    aspectRatio = '16:9';
            }
            
            resolve(aspectRatio);
        });
    });
}

async function main() {
    console.log("üé¨ AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–µ–æ (Veo 2.0) –∑–∞–ø—É—â–µ–Ω–æ!");
    console.log("üí° –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –≤—ñ–¥–µ–æ, —è–∫–µ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ (–∞–±–æ 'exit' –¥–ª—è –≤–∏—Ö–æ–¥—É).");
    console.log("‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Veo 2.0 —î –ø–ª–∞—Ç–Ω–æ—é —ñ –º–æ–∂–µ –≤–∏–º–∞–≥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ Google AI Pro.");

    const askForVideo = async () => {
        rl.question("\nüë§ –í–∞—à –∑–∞–ø–∏—Ç: ", async (input) => {
            if (input.toLowerCase() === 'exit' || input.toLowerCase() === '–≤–∏—Ö—ñ–¥') {
                console.log("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!");
                rl.close();
                return;
            }

            if (input.trim() === '') {
                console.log("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –≤—ñ–¥–µ–æ!");
                askForVideo();
                return;
            }

            const duration = await selectDuration();
            const aspectRatio = await selectAspectRatio();
            
            await generateVideo(input, duration, aspectRatio);
            
            console.log("\n" + "=".repeat(60) + "\n");
            askForVideo();
        });
    };

    askForVideo();
}

main();