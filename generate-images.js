import dotenv from 'dotenv';
import { GoogleGenAI, Modality } from "@google/genai";
import * as fs from "node:fs";
import readline from 'readline';

dotenv.config();

const apiKey = process.env.GEMINI_API_KEY;

if (!apiKey) {
  console.error("GEMINI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞");
  process.exit(1);
}

const ai = new GoogleGenAI({ apiKey });

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function generateImage(prompt) {
  try {
    console.log("üé® –ì–µ–Ω–µ—Ä—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...");
    
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash-image",
      contents: prompt,
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.text) {
        console.log("üìù –û–ø–∏—Å:", part.text);
      } else if (part.inlineData) {
        const imageData = part.inlineData.data;
        const buffer = Buffer.from(imageData, "base64");
        
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `images/generated-image-${timestamp}.png`;
        
        fs.writeFileSync(filename, buffer);
        console.log(`‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫: ${filename}`);
      }
    }
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", error.message);
    
    if (error.message.includes("quota") || error.message.includes("429") || 
        error.message.includes("image") || error.message.includes("modality")) {
      
      console.log("üîÑ –ö–≤–æ—Ç–∞ –≤–∏—á–µ—Ä–ø–∞–Ω–∞ –∞–±–æ –º–æ–¥–µ–ª—å –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.");
      console.log("üìù –°—Ç–≤–æ—Ä—é—é –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –∑–∞–º—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...");
      
      try {
        const response = await ai.models.generateContent({
          model: "gemini-2.5-flash",
          contents: `–°—Ç–≤–æ—Ä–∏ –¥—É–∂–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${prompt}. 
          –û–ø–∏—à–∏ –∫–æ–ª—å–æ—Ä–∏, –∫–æ–º–ø–æ–∑–∏—Ü—ñ—é, —Å—Ç–∏–ª—å, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –¥–µ—Ç–∞–ª—ñ. 
          –¶–µ –º–∞—î –±—É—Ç–∏ –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å, —â–æ–± —Ö—É–¥–æ–∂–Ω–∏–∫ –º—ñ–≥ –Ω–∞–º–∞–ª—é–≤–∞—Ç–∏ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.`,
        });
        
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `images/image-description-${timestamp}.txt`;
        
        fs.writeFileSync(filename, `–ó–∞–ø–∏—Ç: ${prompt}\n\n–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å:\n${response.text}`);
        console.log(`üìù –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫: ${filename}`);
        console.log("üìñ –û–ø–∏—Å:", response.text);
        
      } catch (descError) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–ø–∏—Å—É:", descError.message);
      }
    }
  }
}

async function main() {
  console.log("üé® AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞–ø—É—â–µ–Ω–æ!");
  console.log("üí° –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ (–∞–±–æ 'exit' –¥–ª—è –≤–∏—Ö–æ–¥—É):\n");

  const askForImage = () => {
    rl.question("üë§ –í–∞—à –∑–∞–ø–∏—Ç: ", async (input) => {
      if (input.toLowerCase() === 'exit' || input.toLowerCase() === '–≤–∏—Ö—ñ–¥') {
        console.log("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!");
        rl.close();
        return;
      }

      if (input.trim() === '') {
        console.log("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è!");
        askForImage();
        return;
      }

      await generateImage(input);
      console.log("\n" + "=".repeat(50) + "\n");
      askForImage();
    });
  };

  askForImage();
}

await main();
