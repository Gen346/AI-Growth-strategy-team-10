import { GoogleGenAI, PersonGeneration } from '@google/genai';
import { writeFile, readFile, mkdir } from 'fs/promises';
import { existsSync } from 'fs';
import { join } from 'path';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

async function imageToBase64(path) {
  const data = await readFile(path);
  return data.toString('base64');
}

async function main() {
  const args = process.argv.slice(2);
  
  if (args.length < 2) {
    console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤!');
    console.log('\nüìñ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:');
    console.log('   node generate-videos-from-image.js <—à–ª—è—Ö_–¥–æ_—Ñ–æ—Ç–æ> <–ø—Ä–æ–º–ø—Ç>');
    console.log('\nüìù –ü—Ä–∏–∫–ª–∞–¥:');
    console.log('   node generate-videos-from-image.js ./images/photo.png "–°—Ç–≤–æ—Ä–∏ –∫—Ä–∞—Å–∏–≤–µ –≤—ñ–¥–µ–æ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é"');
    process.exit(1);
  }

  const imagePath = args[0];
  const prompt = args.slice(1).join(' ');

  if (!existsSync(imagePath)) {
    console.error(`‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${imagePath}`);
    process.exit(1);
  }

  if (!process.env.GEMINI_API_KEY) {
    console.error('‚ùå –í—Å—Ç–∞–Ω–æ–≤–∏ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ');
    process.exit(1);
  }

  console.log('\nüé• === –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–µ–æ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ===');
  console.log(`üì∏ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${imagePath}`);
  console.log(`üí¨ –ü—Ä–æ–º–ø—Ç: ${prompt}`);
  console.log('=====================================\n');

  const ai = new GoogleGenAI({
    apiKey: process.env.GEMINI_API_KEY,
  });

  try {
    const videosDir = 'videos';
    if (!existsSync(videosDir)) {
      await mkdir(videosDir, { recursive: true });
      console.log(`‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É: ${videosDir}`);
    }

    console.log('üìñ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...');
    const imageBase64 = await imageToBase64(imagePath);
    
    const mimeType = imagePath.toLowerCase().endsWith('.png') ? 'image/png' : 'image/jpeg';

    console.log(`‚úì –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ (${Math.round(imageBase64.length / 1024)} KB)`);
    console.log('üé¨ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–µ–æ (—Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω)...\n');

    let operation = await ai.models.generateVideos({
      model: 'veo-2.0-generate-001',
      prompt: prompt,
      image: {
        imageBytes: imageBase64,
        mimeType: mimeType,
      },
      config: {
        numberOfVideos: 1,
        aspectRatio: '16:9',
        durationSeconds: 8,
        personGeneration: PersonGeneration.ALLOW_ADULT,
      },
    });

    let attempts = 0;
    while (!operation.done) {
      attempts++;
      console.log(`‚è≥ –û–±—Ä–æ–±–∫–∞... (—Å–ø—Ä–æ–±–∞ ${attempts}, –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è 10 —Å–µ–∫)`);
      await new Promise((resolve) => setTimeout(resolve, 10000));
      operation = await ai.operations.getVideosOperation({ operation });
    }

    console.log('\n‚úÖ –í—ñ–¥–µ–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!');

    const videos = operation.response?.generatedVideos;
    if (!videos || videos.length === 0) {
      console.error('‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≤—ñ–¥–µ–æ');
      return;
    }

    console.log(`üìπ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ: ${videos.length}\n`);

    for (let i = 0; i < videos.length; i++) {
      const uri = videos[i]?.video?.uri;
      if (!uri) {
        console.warn(`‚ö†Ô∏è –í—ñ–¥–µ–æ ${i} –Ω–µ –º–∞—î URI`);
        continue;
      }

      console.log(`üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ ${i + 1}...`);

      const downloadUrl = uri.includes('?')
        ? `${uri}&key=${process.env.GEMINI_API_KEY}`
        : `${uri}?key=${process.env.GEMINI_API_KEY}`;

      const resp = await fetch(downloadUrl);
      if (!resp.ok) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${resp.status} ${resp.statusText}`);
        continue;
      }

      const buffer = await resp.arrayBuffer();
      const timestamp = Date.now();
      const filename = `generated_video_${timestamp}_${i}.mp4`;
      const outputPath = join(videosDir, filename);
      
      await writeFile(outputPath, Buffer.from(buffer));
      
      const fileSizeMB = (buffer.byteLength / (1024 * 1024)).toFixed(2);
      console.log(`‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${outputPath}`);
      console.log(`üìä –†–æ–∑–º—ñ—Ä: ${fileSizeMB} MB\n`);
    }

    console.log('üéâ –ì–æ—Ç–æ–≤–æ! –í—Å—ñ –≤—ñ–¥–µ–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–ø–∫—É videos/');
    
  } catch (err) {
    console.error('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:', err.message || err);
  }
}

main().catch((e) => console.error('–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', e));
